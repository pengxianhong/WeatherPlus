package com.pengxh.app.weatherplus.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pengxh.app.weatherplus.bean.CityManagerBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CITY_MANAGER_BEAN".
*/
public class CityManagerBeanDao extends AbstractDao<CityManagerBean, Long> {

    public static final String TABLENAME = "CITY_MANAGER_BEAN";

    /**
     * Properties of entity CityManagerBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property City = new Property(1, String.class, "city", false, "CITY");
        public final static Property Quality = new Property(2, String.class, "quality", false, "QUALITY");
        public final static Property Color = new Property(3, String.class, "color", false, "COLOR");
        public final static Property Img = new Property(4, String.class, "img", false, "IMG");
        public final static Property Weather = new Property(5, String.class, "weather", false, "WEATHER");
        public final static Property Templow = new Property(6, String.class, "templow", false, "TEMPLOW");
        public final static Property Temphigh = new Property(7, String.class, "temphigh", false, "TEMPHIGH");
    }


    public CityManagerBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CityManagerBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CITY_MANAGER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CITY\" TEXT," + // 1: city
                "\"QUALITY\" TEXT," + // 2: quality
                "\"COLOR\" TEXT," + // 3: color
                "\"IMG\" TEXT," + // 4: img
                "\"WEATHER\" TEXT," + // 5: weather
                "\"TEMPLOW\" TEXT," + // 6: templow
                "\"TEMPHIGH\" TEXT);"); // 7: temphigh
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CITY_MANAGER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CityManagerBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(2, city);
        }
 
        String quality = entity.getQuality();
        if (quality != null) {
            stmt.bindString(3, quality);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(4, color);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(5, img);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(6, weather);
        }
 
        String templow = entity.getTemplow();
        if (templow != null) {
            stmt.bindString(7, templow);
        }
 
        String temphigh = entity.getTemphigh();
        if (temphigh != null) {
            stmt.bindString(8, temphigh);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CityManagerBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(2, city);
        }
 
        String quality = entity.getQuality();
        if (quality != null) {
            stmt.bindString(3, quality);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(4, color);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(5, img);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(6, weather);
        }
 
        String templow = entity.getTemplow();
        if (templow != null) {
            stmt.bindString(7, templow);
        }
 
        String temphigh = entity.getTemphigh();
        if (temphigh != null) {
            stmt.bindString(8, temphigh);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CityManagerBean readEntity(Cursor cursor, int offset) {
        CityManagerBean entity = new CityManagerBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // city
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // quality
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // color
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // img
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // weather
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // templow
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // temphigh
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CityManagerBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCity(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQuality(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setColor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWeather(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTemplow(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTemphigh(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CityManagerBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CityManagerBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CityManagerBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
